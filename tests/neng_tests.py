import unittest

from nose.tools import *
import numpy as np

import neng


class NengTestCase(unittest.TestCase):
    def assertListofStrategyProfileAlmostEqual(self, list1, list2, tol=1e-4):
        self.assertEqual(len(list1), len(list2), "Lists are not equally long.")
        for sp1, sp2 in zip(list1, list2):
            self.assertStrategyProfileAlmostEqual(sp1, sp2, tol)

    def assertStrategyProfileAlmostEqual(self, sp1, sp2, tol=1e-4):
        self.assertListEqual(sp1.shape, sp2.shape, "Shape is not equal")
        for sp1_pl, sp2_pl in zip(sp1._list, sp2._list):
            for a, b in zip(sp1_pl, sp2_pl):
                self.assertAlmostEqual(a, b, delta=tol)

    def assertListOfArraysEqual(self, list1, list2):
        self.assertEqual(len(list1), len(list2), "Lists are not equally long.")
        for arr1, arr2 in zip(list1, list2):
            np.testing.assert_array_equal(arr1, arr2)


class Test_strategy_profile(NengTestCase):
    def setUp(self):
        self.flat_profile = [2, 8, 2, 3, 5, 3, 3, 4]
        self.shape = [2, 3, 3]
        self.profile = neng.StrategyProfile(self.flat_profile, self.shape)

    def test_get(self):
        self.assertEqual(self.profile[0][0], self.flat_profile[0])
        self.assertEqual(self.profile[1][1], self.flat_profile[3])
        self.assertEqual(self.profile[2][2], self.flat_profile[7])
        np.testing.assert_array_equal(self.profile[0], np.array(self.flat_profile[0:2]))
        np.testing.assert_array_equal(self.profile[1], np.array(self.flat_profile[2:5]))
        np.testing.assert_array_equal(self.profile[2], np.array(self.flat_profile[5:8]))

    @raises(IndexError)
    def test_get_key_fail(self):
        self.profile[3][0]

    def test_set(self):
        self.profile[0] = [3, 7]
        self.assertEqual(self.profile[0], [3, 7])
        self.profile[1][0] = 3
        self.assertEqual(self.profile[1][0], 3)

    @raises(IndexError)
    def test_set_fail(self):
        # player 1 has only 2 strategies/options
        self.profile[0] = [3, 3, 3]

    def test_normalize(self):
        a = self.profile.normalize()
        self.assertListOfArraysEqual([np.array([0.2, 0.8]), np.array([0.2, 0.3, 0.5]), np.array([0.3, 0.3, 0.4])],
                                     a._list)

    def test_str(self):
        self.assertEqual(str(self.profile), '2, 8, 2, 3, 5, 3, 3, 4')


class Test_Game(NengTestCase):
    SELTEN = '''
NFG 1 R "Selten (IJGT, 75), Figure 2, normal form"
{ "Player 1" "Player 2" } { 3 2 }

1 1 0 2 0 2 1 1 0 3 2 0

'''

    TWO = '''
NFG 1 R "2x2x2 Example from McKelvey-McLennan, with 9 Nash equilibria, 2 totally mixed" { "Player 1" "Player 2" "Player 3" }

{ { "1" "2" }
{ "1" "2" }
{ "1" "2" }
}
""

{
{ "" 9, 8, 12 }
{ "" 0, 0, 0 }
{ "" 0, 0, 0 }
{ "" 9, 8, 2 }
{ "" 0, 0, 0 }
{ "" 3, 4, 6 }
{ "" 3, 4, 6 }
{ "" 0, 0, 0 }
}
1 2 3 4 5 6 7 8

    '''

    SEVEN = '''NFG 1 R "Generated by GAMUT v1.0.1
A Game With Uniformly Random Payoffs
Game Parameter Values:
Random seed:	1367072601249
Cmd Line:	-g RandomGame -players 2 -actions 7 -output GambitOutput -f ../neng/games/twop/7.nfg -int_payoffs -int_mult 10
Players:	2
Actions:	7 7
players:	2
actions:	[7]" { "Player1" "Player2" } { 7 7 }

-538 468 -296 871 -806 -710 -447 200 -228 578 -860 -746 -462 544 -710 -700 660 -411 -492 405 52 -788 -578 -133 -630 443 891 738 -545 336 139 -14 -581 89 -972 33 -274 94 -346 -701 95 -130 787 -813 798 218 386 479 51 -819 -598 -466 562 425 398 -170 -965 512 107 -537 -544 214 29 -26 292 468 -643 556 -557 -107 118 122 684 -124 -719 -26 -340 -841 729 -111 65 571 -454 322 -475 119 -187 -871 -54 972 -716 707 592 72 -304 787 -9 -955
    '''

    def setUp(self):
        self.game_selten = neng.Game(self.SELTEN)
        self.game_selten_array = [np.array([[1., 1.],
                                            [0., 0.],
                                            [0., 2.]]),
                                  np.array([[1., 1.],
                                            [2., 3.],
                                            [2., 0.]])]
        self.game_selten_str = """NFG 1 R "Selten (IJGT, 75), Figure 2, normal form"
{ "Player 1" "Player 2" } { 3 2 }

1.0 1.0 0.0 2.0 0.0 2.0 1.0 1.0 0.0 3.0 2.0 0.0"""
        self.game_selten_shape = [3, 2]
        self.game_selten_pne = [neng.StrategyProfile([1.0, 0.0, 0.0, 1.0, 0.0], self.game_selten_shape)]
        self.game_selten_mne = [[1.0, 0.0, 0.0, 1.0, 0.0],
                                [1.0, 0.0, 0.0, 0.5, 0.5]]
        self.game_selten_mne = map(lambda x: neng.StrategyProfile(x, self.game_selten_shape), self.game_selten_mne)

        self.game_two = neng.Game(self.TWO)
        self.game_two_array = [np.array([[[9., 0.],
                                          [0., 3.]],
                                         [[0., 3.],
                                          [9., 0.]]]),
                               np.array([[[8., 0.],
                                          [0., 4.]],
                                         [[0., 4.],
                                          [8., 0.]]]),
                               np.array([[[12., 0.],
                                          [0., 6.]],
                                         [[0., 6.],
                                          [2., 0.]]])]
        self.game_two_str = """NFG 1 R "2x2x2 Example from McKelvey-McLennan, with 9 Nash equilibria, 2 totally mixed"
{ "Player 1" "Player 2" "Player 3" } { 2 2 2 }

9.0 8.0 12.0 0.0 0.0 0.0 0.0 0.0 0.0 9.0 8.0 2.0 0.0 0.0 0.0 3.0 4.0 6.0 3.0 4.0 6.0 0.0 0.0 0.0"""
        self.game_two_shape = [2, 2, 2]
        self.game_two_pne = [[0.0, 1.0, 0.0, 1.0, 1.0, 0.0],
                             [1.0, 0.0, 1.0, 0.0, 1.0, 0.0],
                             [0.0, 1.0, 1.0, 0.0, 0.0, 1.0],
                             [1.0, 0.0, 0.0, 1.0, 0.0, 1.0]]
        self.game_two_pne = map(lambda profile: neng.StrategyProfile(profile, self.game_two_shape), self.game_two_pne)

        self.game_seven = neng.Game(self.SEVEN)
        self.game_seven_shape = [7, 7]
        self.game_seven_mne = [[0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
                               [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0],
                               [0.0, 0.13143631436314362, 0.0, 0.0, 0.0, 0.0, 0.86856368563685649, 0.5818639798488664,
                                0.41813602015113355, 0.0, 0.0, 0.0, 0.0, 0.0]]
        self.game_seven_mne = map(lambda x: neng.StrategyProfile(x, self.game_seven_shape), self.game_seven_mne)

    def test_read_payoff(self):
        self.assertEqual(self.game_selten.name, "Selten (IJGT, 75), Figure 2, normal form")
        self.assertEqual(self.game_selten.players, ["Player 1", "Player 2"])
        self.assertEqual(self.game_selten.shape, [3, 2])
        np.testing.assert_array_equal(self.game_selten.array[0], self.game_selten_array[0])
        np.testing.assert_array_equal(self.game_selten.array[1], self.game_selten_array[1])

    def test_read_outcome(self):
        self.assertEqual(self.game_two.name,
                         "2x2x2 Example from McKelvey-McLennan, with 9 Nash equilibria, 2 totally mixed")
        self.assertEqual(self.game_two.players, ["Player 1", "Player 2", "Player 3"])
        self.assertEqual(self.game_two.shape, [2, 2, 2])
        np.testing.assert_array_equal(self.game_two.array[0], self.game_two_array[0])
        np.testing.assert_array_equal(self.game_two.array[1], self.game_two_array[1])
        np.testing.assert_array_equal(self.game_two.array[2], self.game_two_array[2])

    def test_str(self):
        self.assertEqual(self.game_selten_str, str(self.game_selten))
        self.assertEqual(self.game_two_str, str(self.game_two))

    def test_pne(self):
        self.assertEqual(self.game_selten.findEquilibria('pne'), self.game_selten_pne)
        self.assertEqual(self.game_two.findEquilibria('pne'), self.game_two_pne)

    def test_support_enumeration(self):
        self.assertListofStrategyProfileAlmostEqual(self.game_seven.findEquilibria('support_enumeration'),
                                                    self.game_seven_mne)
        self.assertListofStrategyProfileAlmostEqual(self.game_selten.findEquilibria('support_enumeration'),
                                                    self.game_selten_mne)
